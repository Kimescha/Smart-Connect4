# -*- coding: utf-8 -*-
"""connect-4-genetic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VB0xbG8pFDdkGnKixgc0oFNStfbe-etS
"""

import numpy as np
import math
import pygad
import pygad.nn
import pygad.gann

ROW_COUNT = 6
COLUMN_COUNT = 7

gann = pygad.gann.GANN(num_solutions=5,
                       num_neurons_input=42,
                       num_neurons_hidden_layers=[32, 16],
                       num_neurons_output=7,
                       hidden_activations=["relu", "relu"],
                       output_activation="softmax"
                      )

def create_board():
    board = np.zeros((6,7))
    return board

def drop_piece(board, row, col, piece):
    board[row][col] = piece

def winning_move(board, piece):
    # Check horizontal locations for win
    for c in range(COLUMN_COUNT-3):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
                return True

    # Check vertical locations for win
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
                return True

    # Check positively sloped diaganols
    for c in range(COLUMN_COUNT-3):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
                return True

    # Check negatively sloped diaganols
    for c in range(COLUMN_COUNT-3):
        for r in range(3, ROW_COUNT):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
                return True

def is_terminal_node(board):
    return winning_move(board, 0) or winning_move(board, 1) or len(get_valid_locations(board)) == 0

def get_next_open_row(board, col):
    for r in range(ROW_COUNT):
        if board[r][col] == 0:
            return r

def is_valid_location(board, col):
    return board[6-1][col] == 0

def get_valid_locations(board):
    valid_locations = []
    for col in range(7):
        if is_valid_location(board, col):
            valid_locations.append(col)
    return valid_locations

def pick_best_move(board, piece):

    valid_locations = get_valid_locations(board)
    best_score = -10000
    best_col = random.choice(valid_locations)
    for col in valid_locations:
        row = get_next_open_row(board, col)
        temp_board = board.copy()
        drop_piece(temp_board, row, col, piece)
        score = score_position(temp_board, piece)
        if score > best_score:
            best_score = score
            best_col = col

    return best_col

def minimax(board, depth, alpha, beta, maximizingPlayer):
    valid_locations = get_valid_locations(board)
    is_terminal = is_terminal_node(board)
    if depth == 0 or is_terminal:
        if is_terminal:
            if winning_move(board, 1):
                return (None, 100000000000000)
            elif winning_move(board, 0):
                return (None, -10000000000000)
            else: # Game is over, no more valid moves
                return (None, 0)
        else: # Depth is zero
            return (None, score_position(board, 1))
    if maximizingPlayer:
        value = -math.inf
        column = random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            b_copy = board.copy()
            drop_piece(b_copy, row, col, 1)
            new_score = minimax(b_copy, depth-1, alpha, beta, False)[1]
            if new_score > value:
                value = new_score
                column = col
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return column, value

    else: # Minimizing player
        value = math.inf
        column = random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            b_copy = board.copy()
            drop_piece(b_copy, row, col, 0)
            new_score = minimax(b_copy, depth-1, alpha, beta, True)[1]
            if new_score < value:
                value = new_score
                column = col
            beta = min(beta, value)
            if alpha >= beta:
                break
        return column, value

def play_with_minimax(is_neural_net_first_player, idx):
    is_neural_net_winner = None
    board = create_board()
    if is_neural_net_first_player:
        game_over = False
        while not game_over:
            #MiniMax Turn
            col, minimax_score = minimax(board, 5, -math.inf, math.inf, False)
            row = get_next_open_row(board, col)
            drop_piece(board, row, col, 0)
            if winning_move(board, 0):
                game_over = True
                is_neural_net_winner = False
            #Neural Net Turn
            pred = pygad.nn.predict(last_layer=gann.population_networks[idx],
                            data_inputs=board
                           )
            row = get_next_open_row(board, pred)
            drop_piece(board, row, col, 1)
            if winning_move(board, 1):
                game_over = True  
                is_neural_net_winner = True
    else:
        game_over = False
        while not game_over:
            #Neural Net Turn
            pred = pygad.nn.predict(last_layer=gann.population_networks[idx], data_inputs=board)
            row = get_next_open_row(board, pred)
            drop_piece(board, row, col, 1)
            if winning_move(board, 1):
                game_over = True    
                is_neural_net_winner = True
            #MiniMax Turn
            col, minimax_score = minimax(board, 5, -math.inf, math.inf, True)
            row = get_next_open_row(board, col)
            drop_piece(board, row, col, 0)
            if winning_move(board, 0):
                game_over = True   
                is_neural_net_winner = False
    return is_neural_net_winner

def fitness(sol, idx):
    count_neural_net_wins = 0
    for i in range(50):
        result = play_with_minimax(True, idx)
        if result == True:
            count_neural_net_wins += 1
    for i in range(50):
        result = play_with_minimax(False, idx)
        if result == True:
            count_neural_net_wins += 1
    return count_neural_net_wins / 100

def callback(genetic_algorithm_instance):
    population_matrices = pygad.gann.population_as_matrices(population_networks=gann.population_networks, 
                                                            population_vectors=genetic_algorithm_instance.population)
    gann.update_population_trained_weights(population_trained_weights=population_matrices)

genetic_algorithm_instance = pygad.GA(num_generations=100,
                                      num_parents_mating=4,
                                      initial_population=pygad.gann.population_as_vectors(population_networks=gann.population_networks).copy(),
                                      fitness_func=fitness,
                                      mutation_percent_genes=10,
                                      callback_generation=callback
                                     )

genetic_algorithm_instance.run()

